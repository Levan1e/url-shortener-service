// Code generated by MockGen. DO NOT EDIT.
// Source: C:\url-shortener-service\internal\repository\postgres\storage_pg.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
)

// MockPgxPoolInterface is a mock of PgxPoolInterface interface.
type MockPgxPoolInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPgxPoolInterfaceMockRecorder
}

// MockPgxPoolInterfaceMockRecorder is the mock recorder for MockPgxPoolInterface.
type MockPgxPoolInterfaceMockRecorder struct {
	mock *MockPgxPoolInterface
}

// NewMockPgxPoolInterface creates a new mock instance.
func NewMockPgxPoolInterface(ctrl *gomock.Controller) *MockPgxPoolInterface {
	mock := &MockPgxPoolInterface{ctrl: ctrl}
	mock.recorder = &MockPgxPoolInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPgxPoolInterface) EXPECT() *MockPgxPoolInterfaceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockPgxPoolInterface) Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockPgxPoolInterfaceMockRecorder) Exec(ctx, sql interface{}, arguments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPgxPoolInterface)(nil).Exec), varargs...)
}

// QueryRow mocks base method.
func (m *MockPgxPoolInterface) QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockPgxPoolInterfaceMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockPgxPoolInterface)(nil).QueryRow), varargs...)
}
